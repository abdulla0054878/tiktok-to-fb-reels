const puppeteer = require("puppeteer");
const delay = (ms) => new Promise((res) => setTimeout(res, ms));

const PAGE_PROFILE_LINK = process.env.FB_PAGE_PROFILE;
const cookiesJSON = process.env.FB_COOKIES;

// Universal Button click helper
async function clickButtonByText(pageOrFrame, labels, context = "Page") {
  for (const label of labels) {
    const btns = await pageOrFrame.$$('div[role="button"], span');
    for (const btn of btns) {
      const txt = await pageOrFrame.evaluate(el => el.innerText, btn);
      if (txt && txt.trim().includes(label)) {
        await btn.click();
        console.log(`ЁЯСЙ Button Clicked: ${label} [${context}]`);
        await delay(2000);
        return true;
      }
    }
  }
  console.log(`тЪая╕П Button not found: ${labels.join(" / ")} [${context}]`);
  return false;
}

(async () => {
  const videoPath = process.argv[2];
  if (!videoPath) {
    console.error("тЭМ ржнрж┐ржбрж┐ржУ path ржжрж┐рждрзЗ рж╣ржмрзЗ (subprocess arg[2])!");
    process.exit(1);
  }

  console.log("тЦ╢я╕П Puppeteer starting...");

  let browser;
  try {
    browser = await puppeteer.launch({
      executablePath: process.env.PUPPETEER_EXECUTABLE_PATH || "/usr/bin/chromium",
      headless: true,
      args: [
        "--no-sandbox",
        "--disable-setuid-sandbox",
        "--disable-dev-shm-usage",
        "--disable-gpu",
      ],
    });
    console.log("тЬЕ Browser launched OK");
  } catch (err) {
    console.error("тЭМ Browser launch error:", err);
    process.exit(1);
  }

  const page = await browser.newPage();

  // --- Apply Cookies ---
  try {
    if (cookiesJSON) {
      let cookies = JSON.parse(cookiesJSON);
      cookies = cookies.map(c => { delete c.sameSite; return c; });
      console.log("ЁЯНк Cookies parsed:", cookies.length, "(sameSite removed)");
      await page.setCookie(...cookies);
      console.log("тЬЕ Cookies applied!");
    } else {
      console.error("тЪая╕П FB_COOKIES env missing!");
    }
  } catch (err) {
    console.error("тЭМ Cookie error:", err);
    await browser.close();
    process.exit(1);
  }

  // --- Open FB Page ---
  try {
    console.log("ЁЯМР Opening FB Page Profile:", PAGE_PROFILE_LINK);
    await page.goto(PAGE_PROFILE_LINK, { waitUntil: "networkidle2", timeout: 60000 });
    await delay(5000);
  } catch (err) {
    console.error("тЭМ FB Page open error:", err);
    await browser.close();
    process.exit(1);
  }

  // --- Switch Now (Page Mode) ---
  await clickButtonByText(page, ["Switch Now", "рж╕рзБржЗржЪ"], "SwitchProfile");
  await delay(5000);

  // --- Open Reels Composer ---
  try {
    console.log("ЁЯОм Opening Reels composer...");
    await page.goto("https://www.facebook.com/reels/create", { waitUntil: "networkidle2", timeout: 60000 });
    await delay(7000);
  } catch (err) {
    console.error("тЭМ Composer open error:", err);
    await browser.close();
    process.exit(1);
  }

  // --- Upload Video ---
  try {
    const composer = page.frames().find(f => f.url().includes("reel"));
    if (!composer) throw new Error("тЭМ Composer iframe ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ (рж╕ржорзНржнржмржд рж▓ржЧржЗржи ржкрзЗржЬ ржПрж╕рзЗржЫрзЗ)!");

    const fileInput = await composer.$('input[type=file][accept*="video"]');
    if (!fileInput) throw new Error("тЪая╕П File input ржкрж╛ржУрзЯрж╛ ржЧрзЗрж▓ ржирж╛!");
    await fileInput.uploadFile(videoPath);
    console.log("ЁЯУд ржнрж┐ржбрж┐ржУ attach complete:", videoPath);

    // Next тЖТ Next
    await clickButtonByText(composer, ["Next", "ржкрж░ржмрж░рзНрждрзА"], "Composer");
    await clickButtonByText(composer, ["Next", "ржкрж░ржмрж░рзНрждрзА"], "Composer");

    // ---- Directly Publish (Caption ржмрж╛ржж ржжрж┐ржпрж╝рзЗ) ----
    await clickButtonByText(composer, ["Publish", "ржкрзНрж░ржХрж╛рж╢"], "Composer");
    console.log("тЬЕ Reel upload finished (caption skipped)!");

  } catch (err) {
    console.error("тЭМ Error uploading/publishing video:", err);
    await browser.close();
    process.exit(1);
  }

  await delay(15000);
  await browser.close();
})();
