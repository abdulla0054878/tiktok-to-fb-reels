/**
 * puppeteer_uploader.js (Final)
 * Business Suite ‚Üí Page Reel Upload
 * Railway server‡ßá TikTok ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶π‡¶ì‡ßü‡¶æ /tmp/*.mp4 ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì Attach ‡¶ï‡¶∞‡¶¨‡ßá
 */

const puppeteer = require("puppeteer");
const delay = (ms) => new Promise((res) => setTimeout(res, ms));

const cookiesJSON = process.env.FB_COOKIES;
const captionText = process.env.FB_CAPTION || "üöÄ Auto Reel Upload";
const PAGE_ASSET_ID = process.env.FB_PAGE_ID; // Business Suite Page ID

// Helper ‚Üí Universal Click by Text
async function clickButtonByText(page, labels, context = "Page") {
  for (const label of labels) {
    const btns = await page.$$('div[role="button"], span');
    for (const btn of btns) {
      const txt = await page.evaluate(el => el.innerText, btn);
      if (txt && txt.trim().includes(label)) {
        await btn.click();
        console.log(`üëâ Clicked button: ${label} [${context}]`);
        await delay(4000);
        return true;
      }
    }
  }
  console.log(`‚ö†Ô∏è Button not found: ${labels.join(" / ")} [${context}]`);
  return false;
}

(async () => {
  const videoPath = process.argv[2];
  if (!videoPath) {
    console.error("‚ùå ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì path ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø (argv[2])!");
    process.exit(1);
  }

  // Business Suite Reel Composer link
  const url = `https://business.facebook.com/latest/reels_composer/?ref=biz_web_home_create_reel&asset_id=${PAGE_ASSET_ID}&context_ref=HOME`;

  console.log("‚ñ∂Ô∏è Puppeteer starting...");

  const browser = await puppeteer.launch({
    headless: true,
    executablePath: process.env.PUPPETEER_EXECUTABLE_PATH || "/usr/bin/chromium",
    args: ["--no-sandbox","--disable-setuid-sandbox","--disable-dev-shm-usage","--disable-gpu"]
  });
  const page = await browser.newPage();

  // ---- Apply Cookies ----
  try {
    if (cookiesJSON) {
      let cookies = JSON.parse(cookiesJSON);
      cookies = cookies.map(c => { delete c.sameSite; return c; });
      await page.setCookie(...cookies);
      console.log("‚úÖ Cookies applied:", cookies.length);
    }
  } catch (err) {
    console.error("‚ùå Cookie parse error:", err);
    await browser.close();
    process.exit(1);
  }

  // ---- Open Business Suite Composer ----
  console.log("üåê Opening BizSuite Composer...");
  await page.goto(url, { waitUntil: "networkidle2", timeout: 60000 });
  await delay(7000);

  // ---- Upload Video (Add Video button first) ----
  try {
    console.log("üé¨ Clicking Add Video button...");
    await clickButtonByText(page, ["Add Video","‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®"], "BizSuite");
    await delay(4000);

    const fileInput = await page.$('input[type="file"][accept*="video"]');
    if (!fileInput) throw new Error("‚ùå File input ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶≤ ‡¶®‡¶æ (Add Video modal ‡¶è)!");
    
    await fileInput.uploadFile(videoPath);
    console.log("üì§ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì attach complete:", videoPath);
    await delay(10000);
  } catch (err) {
    console.error("‚ùå Error attaching video:", err);
    await browser.close();
    process.exit(1);
  }

  // ---- Caption ----
  try {
    const captionBox = await page.waitForSelector('textarea', { visible: true, timeout: 20000 });
    await captionBox.type(captionText, { delay: 50 });
    console.log("‚úçÔ∏è Caption typed:", captionText);
  } catch {
    console.warn("‚ö†Ô∏è Caption box not found, skipping caption");
  }

  // ---- Next ‚Üí Next ----
  await clickButtonByText(page, ["Next","‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ"], "BizSuite");
  await delay(5000);

  // ---- Publish ----
  console.log("üöÄ Looking for Publish button...");
  let published = await clickButtonByText(page, ["Publish","‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂","Share"], "BizSuite");

  // fallback DOM scan ‡¶Ø‡¶¶‡¶ø ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü detect ‡¶®‡¶æ ‡¶π‡ßü
  if (!published) {
    const handle = await page.evaluateHandle(() => {
      const els = Array.from(document.querySelectorAll("div[role='button'] span"));
      return els.find(el => el.innerText && (el.innerText.includes("Publish") || el.innerText.includes("‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂")));
    });
    const el = handle.asElement();
    if (el) {
      await el.click();
      console.log("‚úÖ Reel Published via DOM scan!");
      published = true;
    }
  }

  if (!published) {
    console.error("‚ùå Publish button not found!");
    await page.screenshot({ path:"publish_error.png", fullPage:true });
    await browser.close();
    process.exit(1);
  }

  console.log("‚úÖ Reel Upload + Caption + Publish Done!");
  await delay(10000);
  await browser.close();
})();
