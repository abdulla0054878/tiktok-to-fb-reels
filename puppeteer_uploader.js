const puppeteer = require("puppeteer");
const delay = (ms) => new Promise((res) => setTimeout(res, ms));

const cookiesJSON = process.env.FB_COOKIES;
const captionText = process.env.FB_CAPTION || "ЁЯЪА Auto Reel Upload";

// Helper тЖТ click button by text
async function clickButtonByText(pageOrFrame, labels, context = "Page") {
  for (const label of labels) {
    const btns = await pageOrFrame.$$('div[role="button"], span');
    for (const btn of btns) {
      const txt = await pageOrFrame.evaluate(el => el.innerText, btn);
      if (txt && txt.trim().includes(label)) {
        await btn.click();
        console.log(`ЁЯСЙ Button Clicked: ${label} [${context}]`);
        await delay(5000);
        return true;
      }
    }
  }
  console.log(`тЪая╕П Button not found: ${labels.join(" / ")} [${context}]`);
  return false;
}

(async () => {
  const PAGE_PROFILE_LINK = process.env.FB_PAGE_PROFILE; // ржЖржкржирж╛рж░ ржкрзЗржЬ рж▓рж┐ржЩрзНржХ
  const videoPath = process.argv[2]; // Python ржерзЗржХрзЗ ржкрж╛ржарж╛ржирзЛ ржлрж╛ржЗрж▓ path

  if (!videoPath) {
    console.error("тЭМ ржнрж┐ржбрж┐ржУ path ржжрж░ржХрж╛рж░ (argv[2])");
    process.exit(1);
  }

  // Launch browser (Railway server тЖТ headless true)
  const browser = await puppeteer.launch({
    headless: true,
    executablePath: process.env.PUPPETEER_EXECUTABLE_PATH || "/usr/bin/chromium",
    args: ["--no-sandbox","--disable-setuid-sandbox","--disable-dev-shm-usage","--disable-gpu"]
  });

  const page = await browser.newPage();

  // Cookies load from ENV
  if (cookiesJSON) {
    try {
      let cookies = JSON.parse(cookiesJSON);
      cookies = cookies.map(c => { delete c.sameSite; return c; });
      await page.setCookie(...cookies);
      console.log("тЬЕ FB Cookies applied!");
    } catch (e) {
      console.error("тЭМ FB_COOKIES parse error", e);
    }
  }

  // Step 1 тЖТ Page profile link open
  console.log("ЁЯМР Opening Page profileтАж");
  await page.goto(PAGE_PROFILE_LINK, { waitUntil: "networkidle2" });
  await delay(8000);

  // Step 2 тЖТ Switch Now
  console.log("ЁЯСЙ Trying to Switch NowтАж");
  await clickButtonByText(page, ["Switch Now","рж╕рзБржЗржЪ"], "SwitchProfile");
  await delay(10000);

  // Step 3 тЖТ Open Reels Composer
  console.log("ЁЯМР Opening Reels Composer in Page contextтАж");
  await page.goto("https://www.facebook.com/reels/create", { waitUntil: "networkidle2" });
  await delay(7000);

  // Step 4 тЖТ composer iframe detect
  let composer = page.frames().find(f=>f.url().includes("reel"));
  if (!composer) throw new Error("тЪая╕П Reels composer iframe ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐!");

  // Step 5 тЖТ Upload mp4 from server path
  console.log("ЁЯУВ Uploading:", videoPath);
  const fileInput = await composer.$('input[type=file][accept*="video"]');
  if (!fileInput) throw new Error("тЪая╕П File input ржкрж╛ржУрзЯрж╛ ржЧрзЗрж▓ ржирж╛!");
  await fileInput.uploadFile(videoPath);
  console.log("ЁЯУд ржнрж┐ржбрж┐ржУ attach complete!");

  // Step 6 тЖТ Next тЖТ Next
  await clickButtonByText(composer, ["Next","ржкрж░ржмрж░рзНрждрзА"], "Composer");
  await clickButtonByText(composer, ["Next","ржкрж░ржмрж░рзНрждрзА"], "Composer");

  // Step 7 тЖТ Caption
  console.log("тМЫ Waiting for Caption boxтАж");
  try {
    const captionBox = await composer.waitForSelector('div[role="textbox"][contenteditable="true"]', {
      visible: true,
      timeout: 120000,
    });
    await captionBox.type(captionText, { delay: 50 });
    console.log("тЬНя╕П Caption рж▓рж┐ржЦрж╛ ржлрж┐ржирж┐рж╢ржб");
  } catch (e) {
    console.warn("тЪая╕П Caption box ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ тЖТ skip");
  }

  // Step 8 тЖТ Publish
  await clickButtonByText(composer, ["Publish","ржкрзНрж░ржХрж╛рж╢"], "Composer");
  console.log("тЬЕ Reel Upload + Caption + Publish Flow Finished!");

  await browser.close();
})();
